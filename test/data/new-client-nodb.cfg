process ECALDQM = {

include "DQM/EcalBarrelMonitorClient/data/EcalBarrelMonitorClient.cfi"

     replace ecalBarrelMonitorClient.outputFile = "EcalBarrelMonitorClient.root"
     replace ecalBarrelMonitorClient.maskFile = "maskfile.dat"
     replace ecalBarrelMonitorClient.location = "H4"
     replace ecalBarrelMonitorClient.baseHtmlDir = "."
     replace ecalBarrelMonitorClient.enableTCC = true
     replace ecalBarrelMonitorClient.enableMonitorDaemon = true
     replace ecalBarrelMonitorClient.enableStateMachine = true
     replace ecalBarrelMonitorClient.prefixME = "Collector/FU0/"
     replace ecalBarrelMonitorClient.enableServer = false
     replace ecalBarrelMonitorClient.superModules = { 19 }

     path p = { ecalBarrelMonitorClient }

     untracked PSet maxEvents = {untracked int32 input = -1}
     source = DQMEventSource{
       untracked uint32 firstRun = 0
       untracked bool getMESubscriptionListFromFile = true
       untracked string meSubscriptionList = "EcalBarrelSubscriptionList.xml"
       untracked bool getQualityTestsFromFile = false
       untracked int32 numberOfUpdatesToBeSkipped = 1
       untracked string server = "localhost"
       untracked int32 port = 9090
       untracked string name = "DQMEventSource"
       untracked int32 reconnect_delay_secs = 5
       untracked bool actAsServer = false
       untracked string iRunMEName = "Collector/FU0/EventInfo/iRun"
       untracked string iEventMEName = "Collector/FU0/EventInfo/iEvent"
       untracked string timeStampMEName = "Collector/FU0/EventInfo/timeStamp"
     }

     service = DaqMonitorROOTBackEnd{ }

     service = MessageLogger{
       untracked vstring destinations = { "cout" }
       untracked vstring categories = { "EcalBarrelClient" }
       untracked PSet cout = {
         untracked string threshold = "WARNING"
         untracked PSet default          = { untracked int32 limit = 0 }
         untracked PSet EcalBarrelClient = { untracked int32 limit = 0 }
         untracked bool noTimeStamps = true
         untracked bool noLineBreaks = true
       }
     }

}
